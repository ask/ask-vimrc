*omniperl.txt*	Omnicompletion for the perl language. Version: v1 

  
Author:     A.Politz                                                 *omniperl*
            mail : cbyvgmn@su-gevre.qr
            To get the real mail address, do a 'g?$' on the above line.
Copyright:  This software is free, free as in 'free beer'.
            You may do anything you like with it, unless money is involved
	    or you are attempting to re-release it under your name.
	    Thanks to Charles E. Campbell, Jr., whos vimball-help I
	    used as a kind of template for my first vim helpfile.
	    I hope this is usefull, but still : 
	                USE AT YOUR OWN RISK.
	    I promise, this is the last time I am shouting in this file.
	    
	   

==============================================================================
Contents			                           

         Preface ......................................  |omniperl-preface|
	 Features .....................................  |omniperl-features|
	 Configuration ................................  |omniperl-conf|
	 Commands .....................................  |omniperl-commands|
	 Mappings (none)...............................  |omniperl-mappings|
	 OS-Support ...................................  |omniperl-os-support|
	 Todo .........................................  |omniperl-todo|
	 History ......................................  |omniperl-history|

==============================================================================
PREFACE                                                      *omniperl-preface*
>
		    Jean-Luc : "Open hailing frequencies."
		    Tasha    : "Hailing frequencies opened, sir."
<

This is this omnifunction plugin for perl. ( version v1 )

There are many ways to do `it' in perl, as are implementing a omnifunction.
To keep this short, the way I chose was by digging through the documentation
of the module which I am interested in. Sadly there is no standard for pod's,
but they share several similarities :

- The members are found mostly standalone on one line, separating paragraphs.
- Most of them express their kind with embedded perl code.
- They often contain inheritance information, if not otherwise available.

This similarities in mind I wrote a perl script, that regexps through the
documentation and figures out what members the module has to offer and what
kind ( object method, function, etc. ) they belong to.

The disadvantage of this method is a certain kind of imperfection, resulting
most of the time in not found subs, and a dependency on module authors to
write proper, in the sense of this script, documentation. But aside that, I'd
say it works quite well.

The advantage is, that not only information about possible members are
available, but also ,depending on the documentation , about arguments of
subroutines, return values and where to find more help ( in which line , in
which pod ).  All expressed in words of a human mind.  Consider this line from
the Gtk2::Widget documentation : >

		 boolean = $widget->child_focus ($direction)
<
Looking at this in the popup menu, you already have some ideas about,
what arguments this method expects and what it would possibly return.

Even more if you see the context in the preview window : >

		 boolean = $widget->child_focus ($direction)

		      * $direction (Gtk2::DirectionType)
<
==============================================================================
   
FEATURES                                                   *omniperl-features*

The plugin supports currently the following kinds of completion : 
                                                   
 1. Modules ~

This depends, weather a list of modules could be build on startup or not.
See also |omniperl-modulelist-file|.

After a `use' statement, complete all available modules :
>
			      use [ MODULES ] ;

Anywhere else, only modules which the `used' modules are prefixing will be
completed.
                                                  
 2. Import Statements ~

If the module uses the 'Exporter' features, this information is extracted from
@EXPORTS and friends and completed after a use statement :
>
		use Foo::Bar qw( :tag1 function2 constant3 );
<
                                                 
 3. Imported Members ~

By examining the above statements, the plugin tries to figure out which
members you exported from the modules, and completes them.
>
			    anywhere [ IMPORTED ]
<                                               
 4. Instance and class methods ~

When ever you type a '->' arrow, the word before it will be examined and
depending, wheather this will be considered a module or one of your variables,
instance or class methods will be completed.  A module in the sense of the
script follows at the moment this vim|regex|: 
>
			       '\u\%(\w\|:\)*'
 
Everything else is not a module.  
If it is not a module, it tries to find a statement which describes, what kind
of object this variable holds.Therefor it scans back for lines like this : 
>
			      $foo  = Foo::Bar ;

Method calls like '->new()' or prepended `new' tokens are ignored. It first
scans the subroutine, then outside  subroutines and finally in other
subroutines, always from the bottom to the top.

If this does not work, because e.g. the object is a result of another
method call, you can always give a hint in a comment like this : >

	    my $view = Gtk2::TreeView->new($store);
	    my $selection=$view->get_selection(); #Gtk2::Selection
>
Inheritance is mostly handled via the @ISA array. See also
|omniperl-conf-module-conf|.

Note: There is some rudimentary support for subroutine calls transferring
variables in connection with `@_', `push' and `pop'. But this is considered
experimental mumbo jumbo at the moment.
   

 5. Functions and class variables ~

This items are completed after a module and a following
`->' arrow or `::' colons :
>
		         	FooBar::function()
				FooBar->method()
				FooBar::variable
<
                                      
==============================================================================
   
 CONFIGURATION                                                 *omniperl-conf*
 >
  Geordie  : "Maybe we can modify the sensor array to send 
	      a subspace signal, and than ..." 
  Data     : "Most intriguing idea, Geordie." 
  Jean-Luc : "Would that be possible ,Data ?"
  Data     : "Theoretically..."

There are several global variables, which configure the behaviour of this
plugin. On startup the script creates a configuration file, which contains
them all. You can modify this file to your liking. If you are sick of it, just
remove it and the next time you start vim, and edit a perl file, it will be
recreated.

This file contains all documentation of the configurable variables as well.
In fact, it is a copy of the lines below.

                                                         *omniperl-configfile*
If you want to edit it now, a |gf| on this link should send you there : 
>
		       ../ftplugin/perl/omniperl_config.vim       
<
 

Note: If you prefer the traditional way of configuring plugins ,
with variables in your vimrc, then you may just ignore this file.

                                                     *omniperl-conf-blacklist*
g:OmniPerl_Blacklist ~

This is a string value with comma separated items.  These modules will be
completely ignored.
Default: 'Exporter,DynaLoader,AutoLoader' 
                                                *omniperl-conf-handle-unknown*
g:OmniPerl_Handle_Unknown_As ~

This is a string value with comma separated items. Single words on one line
in the pod are parsed with type `unknown'. This determines if, and as what
kind these items will be included in the completion list. It can be configured
on a per module basis.  See |omniperl-config-module-conf| for possible values.
Default : empty , do not use them

                                                       *omniperl-conf-man-cmd*
g:OmniPerl_Man_Cmd ~

This is a string value holding a system command.  If you are using some
strange os, you may specify a different method to access a manual page.  Every
occurrence of the string _MODULE_ will be substituted with the real module
name.  Error messages (aka stderr) should be suppressed, control characters
filtered. This command must write the manpage to `stdout'.
Note: Having one of both (perl or man) commands maybe sufficient depending on
your system.  The default is coded in the perl script.
Default ( build in ) : '(man _MODULE_ | col -b ) 2>/dev/null'

                                                     *omniperl-conf-max-cache*
g:OmniPerl_Max_Cache ~

This is a number.  This is the maximal number of entries ( multi-level hashes
with all kinds of infos about a module and its super-modules ) in the cache.
Set it to 0 to disable caching.
Default : 20

                                                   *omniperl-conf-module-conf*
g:OmniPerl_Module_Conf ~

Here you may configure the plugin on a per module basis.  Every key is a
module name or a prefix of it.  When the plugin looks for a config it will
choose the one with the longest match.  In the sub hashes 5 keys are
recognized : 
Note: These are all strings.
`isa'            A comma separated string containing the 
                 super-modules.
`isa_regex'      A (vim)|regex|that finds one or many
                 super-modules of the current one
                 in the pod/man page.
                 The string '_MODULE_' will be subst.
                 with the current module.
These both override @Module::ISA.

`custom_regex'   A (perl!) regex that finds 
                 members of the module in the man/pod.
                 Normally the script knows what to look
                 for, but sometimes you know it better.
`custom_handle_as'  A comma separated list.
                 This is what the found matches will
                 become.
                 Possible values: `functions'
                 `class_vars',`instance_methods',
                 and `class_methods'.
                 Note: All plural.
`unknown_handle_as' This overrides the global variable
                 'g:OmniPerl_Handle_Unknown_As'
                 See: above for possible values.
Default : 
{
'XML::DOM': {
'handle_unknown_as': 'instance_methods',
 'isa_regex': '_MODULE_\s*extends\s*\zs\(\w\|:\)*\ze'}
,
 'Gtk2::': {
`isa': 'Glib::Object',
 'isa_regex': '.*+--*\zs\%(\w\|:\)*\ze\s*\n\s*+--*_MODULE_.*'}
,
 'Gtk2::SimpleList': { }
}

                                               *omniperl-conf-modulelist-file*
g:OmniPerl_Modulelist_File ~

This is a string value holding a filename.  If this is a readable file it will
be preferred, to use as a list of available modules.  Otherwise other methods
(2) will be tried.  There must be one module per line.


                                                       *omniperl-conf-pod-cmd*
g:OmniPerl_Pod_Cmd ~

This is a string value holding a system command.
See |omniperl-config-man-cmd|.
Default ( build in ) : '( perldoc  _MODULE_ | col -b ) 2>/dev/null'

                                                   *omniperl-conf-pum-context*
g:OmniPerl_Pum_Context ~

This is a string value with comma separated items.  What do you want to see in
the pum ?  Possible values :
 kind    -  The kind of completion, see ':h complete-functions'
 line    -  The matched line in the pod/man.  Includes `args' and `returns'
 args    -  Arguments, if available.
 module  -  The module this identifier belongs to.
 returns -  If this is available. Maybe something like : 'my $return_value'

The pum will be filled in the same order , except for 'kind', which is
handled by vim.
Default:  'module,line'

                                            *omniperl-conf-pum-max-wordlength*
g:OmniPerl_Pum_Max_Wordlength ~

This is a number.  If it is > 0, found completions will be cut after this
value. A '/' will be appended to signal this.
Default: 20
                                                        *omniperl-conf-sanity*
g:OmniPerl_Sanitytests_Passed ~

The plugin does several checks, before it starts the first time. If they all
pass, this will be set to 1.  In general do not modify this variable yourself,
unless you want to force cooperation.
Default: 0, 1 after tests passed.

                   
==============================================================================
  
COMMANDS                                                   *omniperl-commands*

 2 commands are available :
                                                      *omniperl-commands-test*
:OmniPerlTest ~

This command calls s:Test(), which does some tests, to determine wheater the
plugin is going to work on your system or not.

                                               *omniperl-commands-writeconfig*
:OmniPerlWriteConfig ~

If you are manipulationg the configuration variables on the command line, you
can use this command to save the changes, by writing them to the
configuration file. See |omniperl-configfile|.

==============================================================================
  
MAPPINGS                                                   *omniperl-mappings*

This plugin does not define any mappings. But it sets the|omnifunc|option.
If you do not want that, then maybe this plugin is not for you.
( Don't say writing vim scripts made me sarcastic.)

==============================================================================
  
OS-SUPPORT            *omniperl-win32* *omniperl-linux*  *omniperl-os-support*

While support for other operating systems then linux is not build in at the
moment, it should be possible getting it to work.

Actually the only OS, where this has been tested for now is 'Debian unstable'.

Look at |omniperl-conf-man-cmd| and |omniperl-conf-pod-cmd| for the
needed system commands.

Good Luck !

==============================================================================

TODO                                                           *omniperl-todo*

If you want to support this plugin, being it suggestions, comments or
improvements, you are welcome. You can find my mail address in the |omniperl|
header. Make shure you are referring to the latest version, found at
http://www.vim.org/

In order of importance :

- fix bugs 
- fix bugs 
- improve support for other os 
- fix contextual errors relating to improper understanding of the language
- implement some notion of hashes and arrays, parse hashes
- improve the context shown in the pvw from the docs
- implement a command that shows the documentation context sensitive
  without CTRL-O
- add more default module confs to g:OmniPerl_Module_Conf 
- ( ... )
    

==============================================================================

  
HISTORY                                                     *omniperl-history*

   16/06/07  * Initial release - beta status, but hopefully usable.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:inex=substitute(v\\:fname,'/','\\','g'):isf+=/,\\
